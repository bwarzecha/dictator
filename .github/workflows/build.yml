name: Build macOS App

on:
  push:
    branches: [main]
    tags:
      - 'v*'
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: Build Dictator.app
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install py2app

      - name: Import Code Signing Certificate
        if: startsWith(github.ref, 'refs/tags/v') && vars.ENABLE_CODE_SIGNING == 'true'
        env:
          CERTIFICATE_BASE64: ${{ secrets.MACOS_CERTIFICATE }}
          CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD || 'temporary-password' }}
        run: |
          # Decode certificate
          echo "$CERTIFICATE_BASE64" | base64 --decode > certificate.p12

          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain

          # Import certificate
          security import certificate.p12 -k build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign

          # Allow codesign to use the keychain
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" build.keychain

          # Clean up certificate file
          rm certificate.p12

          echo "‚úÖ Code signing certificate imported"

      - name: Build .app bundle
        run: |
          # Only set identity for release builds where cert was imported
          if [[ "${{ github.ref }}" == refs/tags/v* ]] && [[ "${{ vars.ENABLE_CODE_SIGNING }}" == "true" ]]; then
            export CODESIGN_IDENTITY="${{ secrets.CODESIGN_IDENTITY }}"
            echo "üîê Building with code signing: $CODESIGN_IDENTITY"
          else
            echo "‚ö†Ô∏è  Building without code signing (ad-hoc)"
          fi
          python setup.py py2app

      - name: Verify .app bundle
        run: |
          ls -lh dist/
          ls -la dist/Dictator.app/Contents/
          cat dist/Dictator.app/Contents/Info.plist

          # Verify code signature if signed
          if codesign -dv dist/Dictator.app 2>/dev/null; then
            echo "‚úÖ App is code signed"
            codesign --verify --deep --strict --verbose=2 dist/Dictator.app
          else
            echo "‚ö†Ô∏è  App is ad-hoc signed (no Developer ID)"
          fi

      - name: Create DMG (for releases)
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          # Create a temporary directory for DMG contents
          mkdir -p dmg_tmp
          cp -R dist/Dictator.app dmg_tmp/

          # Create symbolic link to Applications folder
          ln -s /Applications dmg_tmp/Applications

          # Create DMG
          hdiutil create -volname "Dictator" \
            -srcfolder dmg_tmp \
            -ov -format UDZO \
            dist/Dictator.dmg

          ls -lh dist/Dictator.dmg

      - name: Upload .app as artifact
        uses: actions/upload-artifact@v4
        with:
          name: Dictator-macOS
          path: dist/Dictator.app
          retention-days: 30

      - name: Upload DMG as artifact
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v4
        with:
          name: Dictator-DMG
          path: dist/Dictator.dmg
          retention-days: 90

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/Dictator.dmg
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
